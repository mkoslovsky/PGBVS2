// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// bvsPGcpp
List bvsPGcpp(int iterations, int thin, String prior, bool DP_beta, bool DP_kappa, arma::vec Y, arma::mat W, arma::vec subject, arma::vec subject_dems, arma::mat Ustar, arma::vec Ustar_dems, arma::mat Xbar, arma::mat Z, IntegerVector random_avail, IntegerVector fixed_avail, arma::mat beta, arma::mat v, arma::mat xi, arma::mat mu, arma::mat t2, arma::mat cluster, arma::vec cluster_count, arma::mat cluster_beta, arma::vec vartheta, arma::mat K, arma::mat lambda, arma::cube Gamma, arma::cube zeta, arma::mat cluster_K, arma::vec cluster_count_K, arma::mat cluster_kappa, arma::vec sA, arma::mat V_gamma, arma::vec gamma_0, double m_star, double v_star, double m_0, double v_0, double a, double b, double a_K, double b_K, double a_0, double b_0, double a_vartheta, double b_vartheta, double a_sA, double b_sA);
RcppExport SEXP _PGBVS_bvsPGcpp(SEXP iterationsSEXP, SEXP thinSEXP, SEXP priorSEXP, SEXP DP_betaSEXP, SEXP DP_kappaSEXP, SEXP YSEXP, SEXP WSEXP, SEXP subjectSEXP, SEXP subject_demsSEXP, SEXP UstarSEXP, SEXP Ustar_demsSEXP, SEXP XbarSEXP, SEXP ZSEXP, SEXP random_availSEXP, SEXP fixed_availSEXP, SEXP betaSEXP, SEXP vSEXP, SEXP xiSEXP, SEXP muSEXP, SEXP t2SEXP, SEXP clusterSEXP, SEXP cluster_countSEXP, SEXP cluster_betaSEXP, SEXP varthetaSEXP, SEXP KSEXP, SEXP lambdaSEXP, SEXP GammaSEXP, SEXP zetaSEXP, SEXP cluster_KSEXP, SEXP cluster_count_KSEXP, SEXP cluster_kappaSEXP, SEXP sASEXP, SEXP V_gammaSEXP, SEXP gamma_0SEXP, SEXP m_starSEXP, SEXP v_starSEXP, SEXP m_0SEXP, SEXP v_0SEXP, SEXP aSEXP, SEXP bSEXP, SEXP a_KSEXP, SEXP b_KSEXP, SEXP a_0SEXP, SEXP b_0SEXP, SEXP a_varthetaSEXP, SEXP b_varthetaSEXP, SEXP a_sASEXP, SEXP b_sASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< String >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< bool >::type DP_beta(DP_betaSEXP);
    Rcpp::traits::input_parameter< bool >::type DP_kappa(DP_kappaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W(WSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type subject(subjectSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type subject_dems(subject_demsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Ustar(UstarSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Ustar_dems(Ustar_demsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Xbar(XbarSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type random_avail(random_availSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type fixed_avail(fixed_availSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type t2(t2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type cluster(clusterSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type cluster_count(cluster_countSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type cluster_beta(cluster_betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type vartheta(varthetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Gamma(GammaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type cluster_K(cluster_KSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type cluster_count_K(cluster_count_KSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type cluster_kappa(cluster_kappaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sA(sASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V_gamma(V_gammaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gamma_0(gamma_0SEXP);
    Rcpp::traits::input_parameter< double >::type m_star(m_starSEXP);
    Rcpp::traits::input_parameter< double >::type v_star(v_starSEXP);
    Rcpp::traits::input_parameter< double >::type m_0(m_0SEXP);
    Rcpp::traits::input_parameter< double >::type v_0(v_0SEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type a_K(a_KSEXP);
    Rcpp::traits::input_parameter< double >::type b_K(b_KSEXP);
    Rcpp::traits::input_parameter< double >::type a_0(a_0SEXP);
    Rcpp::traits::input_parameter< double >::type b_0(b_0SEXP);
    Rcpp::traits::input_parameter< double >::type a_vartheta(a_varthetaSEXP);
    Rcpp::traits::input_parameter< double >::type b_vartheta(b_varthetaSEXP);
    Rcpp::traits::input_parameter< double >::type a_sA(a_sASEXP);
    Rcpp::traits::input_parameter< double >::type b_sA(b_sASEXP);
    rcpp_result_gen = Rcpp::wrap(bvsPGcpp(iterations, thin, prior, DP_beta, DP_kappa, Y, W, subject, subject_dems, Ustar, Ustar_dems, Xbar, Z, random_avail, fixed_avail, beta, v, xi, mu, t2, cluster, cluster_count, cluster_beta, vartheta, K, lambda, Gamma, zeta, cluster_K, cluster_count_K, cluster_kappa, sA, V_gamma, gamma_0, m_star, v_star, m_0, v_0, a, b, a_K, b_K, a_0, b_0, a_vartheta, b_vartheta, a_sA, b_sA));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_PGBVS_bvsPGcpp", (DL_FUNC) &_PGBVS_bvsPGcpp, 48},
    {NULL, NULL, 0}
};

RcppExport void R_init_PGBVS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
